{"version":3,"sources":["App.js","serviceWorker.js","Header.js","index.js"],"names":["App","useState","defaultText","text","setText","className","id","Form","Group","Control","onChange","e","target","value","as","dangerouslySetInnerHTML","__html","marked","Boolean","window","location","hostname","match","Header","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAmCeA,EA9BF,WAAO,IAAD,EAESC,mBAASC,GAFlB,mBAERC,EAFQ,KAEFC,EAFE,KAIf,OAEE,yBAAKC,UAAU,OACb,6BACA,yBAAKA,UAAU,aAAaC,GAAG,iBAC7B,uCAEA,kBAACC,EAAA,EAAKC,MAAN,CAAYF,GAAG,cACb,kBAACC,EAAA,EAAKE,QAAN,CAAcH,GAAG,SAASI,SAAU,SAACC,GAAD,OAAOP,EAAQO,EAAEC,OAAOC,QAAOC,GAAG,WAAWD,MAAOV,MAG5F,yBAAKE,UAAU,aAAaC,GAAG,kBAC7B,wCAEF,yBACES,wBAA2B,CAACC,OAAQC,IAAOd,IAC3CG,GAAI,UACJD,UAAY,OACZS,GAAG,WACHD,MAASV,MASbD,EAAW,0oBCzBGgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBN,IAUeC,EAVA,WAEf,OACE,yBAAKjB,GAAG,UACN,oDCCJkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5fb3d315.chunk.js","sourcesContent":["import React, {useState}  from 'react';\nimport './App.css';\nimport { Form } from \"react-bootstrap\";\nimport marked from 'marked';\n\n const App = () => {\n\n    const [text, setText] = useState(defaultText)\n\n    return (\n\n      <div className=\"App\">\n        <div>\n        <div className=\"box-header\" id=\"editor-header\">\n          <h1>Editor</h1>\n        </div>\n          <Form.Group id=\"editor-box\">\n            <Form.Control id=\"editor\" onChange={(e) => setText(e.target.value)}as=\"textarea\" value={text}/>\n          </Form.Group>\n        </div>\n        <div className=\"box-header\" id=\"preview-header\">\n          <h1>Preview</h1>\n        </div>\n        <div\n          dangerouslySetInnerHTML = {{__html: marked(text)}} \n          id =\"preview\" \n          className = \"text\"\n          as=\"textarea\" \n          value = {text} \n          >\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst defaultText = \n`\n# This is a header.\n\n## This is a sub-header.\n\n**This text is bold.**\n\n*This text is in italics.*\n\n\n***This text is in bold italics.***\n\n> This is a block quote. This\n>\n> paragraph has two lines.\n\n> You can also nest block quotes.\n>> Look at how nested I am!\n\nHere's some reasons why bullet points could also be used:\n\n- To make lists.\n- To show off markdown bullet points.\n- Just for fun.\n\nTo learn more about how to use Markdown, click on the Markdown logo below.\n\n[![The Markdown logo](https://cdn.iconscout.com/icon/free/png-256/markdown-433293.png)](https://markdown-guide.readthedocs.io/en/latest/basics.html)\n\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Header = () => {\r\n\r\nreturn (\r\n  <div id=\"Header\">\r\n    <h1>Markdown Previewer</h1>\r\n  </div>\r\n)\r\n\r\n} \r\n\r\nexport default Header;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Header from \"./Header\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}